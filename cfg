;
; pyxll.cfg
;
; This is an example config file which you should customize.
;
; The example config below assumed the 'examples' folder is present
; in the same folder as this config file.
;
; The sections in this file are:
;
;   PYTHON  - Python related settings (location of Python, Python path etc)
;   PYXLL   - PyXLL add-in related settings (modules to load and other settings)
;   LOG     - Logging settings (where to log to and what to log)
;   LICENSE - License key
;
; For more information see https://www.pyxll.com.

[PYTHON]
;executable:
;  The Python executable file that will be set as sys.executable.
;  It is used to determine which Python runtime to load when PyXLL starts if pythonhome and dll are not set.
;  The version of the Python executable used must match the version of Python PyXLL was built for.
;  May also be set via the environment variable PYXLL_PYTHON_EXECUTABLE.
executable = "C:\Dev\projects\rep$\venv\Scripts\python.exe"

;pythonpath:
;  A list of paths Python will use when importing modules.
;  Multiple paths can be listed either as a semi-colon delimited list or across multiple indented lines.
;  Paths may be absolute paths or relative to this file.
pythonpath = "C:\Dev\projects\rep$"
;"C:\Dev\projects\F3 Shared"
;"C:\Dev\projects\Asia Rates code"
;	./examples

;pythonhome:
;  This doesn't need to be set as it is usually inferred from the Python executable.
;  The Python home directory, used to determine the location of the Python standard libraries.
;  If set then PyXLL will look in this folder for the Python dll if neither executable or dll are set.
;  May also be set via the environment variable PYXLL_PYTHONHOME.
pythonhome = "C:\Dev\Python Interpreter\WPy64-3771\python-3.7.7.amd64\"

;dll:
;  This doesn't need to be set as it is usually inferred from the Python executable.
;  The Python dynamic link library (dll) that will be loaded to run the Python interpreter.
;  Usually this is inferred from the system default Python, executable or pythonhome.
;  The version of the Python dll used must match the version of Python PyXLL was built for.
;  May also be set via the environment variable PYXLL_PYTHON_DLL.
dll = "C:\Dev\Python Interpreter\WPy64-3771\python-3.7.7.amd64\python37.dll"

;ignore_environment:
;  Tells Python to ignore any Python environment variables while initializing (eg PYTHONPATH and PYTHONHOME).
;  This is advised as it prevents any unwanted global config from interfering with how Python is
;  configured in this file.
ignore_environment = 1


[PYXLL]
;modules:
;  List of modules that PyXLL will load when starting.
;  Any code that is to be exposed to Excel should be added to this list, or imported from modules in this list.
;  Multiple modules can be listed either as a comma delimited list or across multiple indented lines.
modules =
	pyxll-link
	syfi.pyxll_link
;	multiasset_portfolio.pyxll-link
;	bfam_f3.exceltools
;	RatesVol
;	lpexceltools
;	arexceltools
;	misc
;	worksheetfuncs
;	arrayfunctions
;	pandas_example
;	customtypes
;	asyncfunc
;	menus
;	automation
;	callbacks
;	objectcache
;	real_time_data
;	ribbon

; error_handler:
; When a UDF raises an Exception the error handler is called to convert the error
; to something more user-friendly.
; Error handlers take 3 arguments, (exc_type, exc_value, exc_traceback).
; If there is no error handler the Exceptions are converted to Excel errors
; (e.g. #N/A, #NUM, etc).
error_handler = pyxll.error_to_string

;ribbon:
;  If set, the ribbon setting should be the file name of custom ribbon user interface XML file.
;  The file name may be an absolute path or relative to the config file.
;  Modules used in the ribbon xml file must be on the Python path (configured above).
;ribbon = ./examples/ribbon/ribbon.xml

;external_config:
;  This setting may be used to reference another config file (or files) located elsewhere.
;  For example, if you want to have the main pyxll.cfg installed on users' local PCs but want to
;  control the configuration via a shared file on the network you can use this to reference that
;  external config file.
;
;  Values in external config files override what's in the parent config file, apart from pythonpath,
;  modules and external_config which get appended to.
;
;  In addition to setting this in the config file, the environment variable PYXLL_EXTERNAL_CONFIG_FILE
;  can be used. Any external configs set by this environment variable will be added to those specified
;  in the config.
;
;  Multiple config files can be specified, and file patterns may be used.
;external_config =

;developer_mode:
;  When the developer mode is active a PyXLL menu with a Reload menu item will be added to
;  the Add-Ins toolbar in Excel.
;  If the developer mode is inactive then no menu items will be automatically created so the
;  only ones visible will be the ones declared in the imported user modules.
developer_mode = 1

;deep_reload:
; When set PyXLL will attempt to reload all modules and their dependencies when reloading.
; When not set, only the modules listed above will be reloaded.
deep_reload = 1

;deep_reload_include, deep_reload_exclude:
;  Lists of modules or packages to include or exclude when doing deep reloading.
;  Not all packages can be reloaded cleanly and so cause problems when deep reloading.
;  Limiting the packages to be included when deep reloading can also improve reload time.
deep_reload_include =
pyxll-link
multiasset_portfolio.pyxll-link
bfam_f3.exceltools

deep_reload_exclude =
sys
time
lxml
pandas
scipy
requests
f3sdk
atom_client

;deep_reload_disable:
;  Completely disable to deep reloading import hook.
;  This can be used if a package cannot be imported when deep reloading is enabled.
;  If you find you need to use this setting, please report it to PyXLL support.
;deep_reload_disable = 0

;error_cache_size:
;  If a worksheet function raises an exception it is cached for retrieval via the
;  get_last_error function. This setting sets the maximum number of exceptions that
;  will be cached.
;error_cache_size = 500

;allow_abort:
;  Default value for allow_abort keyword argument to @xl_func decorator.
;  Use with caution as this enables a Python trace callback which will degrade performance.
;allow_abort = 0

;abort_throttle_time, abort_throttle_count:
;  When a UDF has been registered as abort-able, a trace function is used that gets called
;  frequently as the Python code is run by the Python interpreter.
;  To reduce the impact of the trace function Excel can be queried less often to see if the
;  user has aborted the function.
;  abort_throttle_time is the minimum time in seconds between checking Excel for the abort status.
;  abort_throttle_count is the minimum number of calls to the trace function between checking Excel
;  for the abort status.
;abort_throttle_time = 0.2
;abort_throttle_count = 1000

;auto_resize_arrays:
;  Default value for auto_resize keyword argument to @xl_func decorator.
;auto_resize_arrays = 0

;quiet:
;  Stop PyXLL from showing any message boxes and instead only write errors to the log file.
;  This prevents a message box from being shown even if PyXLL can't load.
;quiet = 0

;always_use_2d_arrays:
;  Proir to PyXLL 4, types ending in '[]' were 2d arrays, or lists of lists. Since 4.0,
;  '[]' types are 1d arrays and '[][]' is used for 2d arrays. If set, this setting forces
;  all array types to be 2d arrays for backwards compatibility with versions prior to 4.0.
;always_use_2d_arrays = 0

;get_cached_object_id:
;  When complex object types are returned to Excel that can't be represented as Excel values
;  they are inserted into an object cache and an id for the cached object is displayed in
;  Excel. This id should be unique as it's used when passing these objects to other functions,
;  which retrieves them from the cache by the id.
;  This setting can be used to override the default id behaviour with a custom function.
;get_cached_object_id = module.get_cached_object_id

;clear_object_cache_on_reload:
;  When reloading PyXLL, by default the object cache is cleared and the numbering
;  used by the default object id naming scheme is reset.
;  This can be disabled by setting this option to 0.
;clear_object_cache_on_reload = 1

[LOG]
;verbosity:
;  Detail of logging to include. May be set to any of:
;    debug (most verbose level, show all log messages including debugging messages)
;    info
;    warning
;    error
;    critical (least verbose level, only show the most critical errors)
verbosity = debug

;format:
;  Log format as used by the standard Python logging package.
format = %(asctime)s - %(levelname)s : %(message)s

;path:
;  Path to write log files to.
;  This may be relative to this config file.
path = ./logs

;file:
;  Filename of the log file.
;  This may include the additional substitution variables:
;    date (current date in YYYYMMDD format)
;    pid (process id)
;    xlversion (xl version)
file = pyxll.%(date)s.log

;encoding:
;  Text encoding to be used when writing the log file.
encoding = utf-8

[LICENSE]
;key:
;  License key as provided when purchasing PyXLL.
key = 8329FF13AC932A4508B72DD115EBD0EA7198F6FBF6C5BAAB90A8089ADAFF2889A9295CE50E0A0CC3A57DEB5F8A1296F98C5E946AD23B386B

;file:
;  Path of a plain text file containing the PyXLL license key.
;  This can be useful when sharing a group license key in a group.
;  The file may include comment lines starting with '#'.
;file = G:\GOG_IT\thirdParty\pyxll\BFAMGroupLicense.txt

[ENVIRONMENT]
FINCAD_PYTHONSDK_YAML_CONFIG_FILE=G:\GOG_IT\jchi\envs\configuration.yml
